//This code is the functional representation of a system for detecting and alerting the behavior of school buses and it was made for the purpose of a semester project in the course "Cyber-Physical Systems".

#include <Wire.h>
#include <SPI.h>
#include <SoftwareSerial.h>
#include <TinyGPS++.h>
#include <ESP32SPISlave.h>
#include <Adafruit_MPU6050.h>
#include <Adafruit_Sensor.h>
//These are all the libraries that need to be included on the program start, so the system can work properly.

// GPS connection pins on Arduino. TinyGPS++ library is used for the communication between the Adafruit_MPU6050 and the GPS.
#define RXPin 16
#define TXPin 17
SoftwareSerial ss(RXPin, TXPin);
TinyGPSPlus gps;

// Setting Up the MPU6050
Adafruit_MPU6050 mpu;

// Setting Up the GSM Module
#define GSM_RX 2
#define GSM_TX 3
SoftwareSerial gsmSerial(GSM_RX, GSM_TX); //example only, we need the actual device (brand and serial number to set up correctly)

// Notification LEDS and Buzzer on Arduino that is in the school bus
#define LED_PIN 12
#define BUZZER_PIN 14
#define BUTTON_PIN 34 // Button to reset alerts

// Speed limit and update frequency
float speedThreshold = 60.0; // Example Speed limit (60 km/h). We will call this speedthreshold afterwards so everyone knows that the speed limit that we set up here, is exceeded by the driver.
unsigned long lastMillis = 0;
unsigned long gpsUpdateInterval = 5000; // We need to set a specific frequency that the device refreshes the speed limit, because Arduino hardware capabilities are very limited.


void loop() {
  // We need to clarify to device how to handle the GPS updates.
  while (ss.available() > 0) {
    gps.encode(ss.read());
    if (gps.location.isUpdated()) {
      float lat = gps.location.lat();
      float lng = gps.location.lng();
      float speed = gps.speed.kmph();

      Serial.print("Lat: "); Serial.print(lat, 6);
      Serial.print(", Lng: "); Serial.print(lng, 6);
      Serial.print(", Speed: "); Serial.print(speed);
      Serial.println(" km/h");

      // Speed limit check
      if (speed > speedThreshold) {
        digitalWrite(LED_PIN, HIGH); // Alert for overspeeding
        tone(BUZZER_PIN, 1000);
        sendAlert("Ανιχνεύθηκε παραβίαση του ορίου ταχύτητας " + String(speed) + " χμ/ω");
      } else {
        digitalWrite(LED_PIN, LOW);
        noTone(BUZZER_PIN);
      }
    }
  }

  // Here we are calling the value that we added before about the acceleration detection to check for accidents
  checkForAccident();

  // With this command we give the choice of the driver to reset the alerts on the device that's in the school bus by pressing the button, in case of wrong detection or system faults.
  if (digitalRead(BUTTON_PIN) == LOW) {
    resetAlert();
  }
}

  // If shudden acceleration is detected, the system will send a message that an accident happened.
  if (a.acceleration.x > XX || a.acceleration.y > XX || a.acceleration.z > XX) {
    Serial.println("Ανιχνεύθηκε Σύγκρουση!");
    digitalWrite(LED_PIN, HIGH);
    tone(BUZZER_PIN, 1500);
    sendAlert("Ατύχημα Σχολικού Λεωφορείου!");
  }
}
//Here we are using GSM to send messages on the parent's phone's numbers, in case of an emergency (accident etc..)
void sendAlert(String message) {
  gsmSerial.println("AT+CMGF=1"); // Set SMS mode
  delay(100);
  gsmSerial.println("AT+CMGS=\"+30XXXXXXXXX, +30ΧΧΧΧΧΧΧΑ, +30ΧΧΧΧΧΧΧΒ...\""); // The numbers needs to be replaced with the parent's numbers
  delay(100);
  gsmSerial.println(message);
  delay(100);
  gsmSerial.write(26); // End SMS command
  delay(1000);
}

void resetAlert() {
  digitalWrite(LED_PIN, LOW);
  noTone(BUZZER_PIN);
  Serial.println("Alert reset.");
}

//For the construction of this code the following articles were used:
//https://www.instructables.com/MPU-6050-Tutorial-How-to-Program-MPU-6050-With-Ard/
//https://codebender.cc/example/TinyGPS++/FullExample#FullExample.ino
//https://shorturl.at/PamUM
//and some youtube videos :)
//Thank you for reading my code. 
